// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String?  @db.LongText
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model Char {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String?  @db.LongText
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
}

model Rule {
  id          Int      @id @default(autoincrement())
  name        String
  link        String
  categoryId  Int
  orderedAs   Int
  content     String   @db.LongText
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
}

model Product {
  id             Int            @id @default(autoincrement())
  title          String
  subtitle       String?
  description    String?        @db.LongText
  size           String?
  color          String?
  colorsAvailabe String?
  stock          Int            @default(0)
  price          Float
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  images         ProductImage[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  source    String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  isAdmin       Boolean   @default(false)
  isPersonnel   Boolean   @default(false)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  rules         Rule[]
  characters    Char[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
