// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AppData {
  id            Int      @id @default(autoincrement())
  createAllowed Boolean  @default(true)
  editAllowed   Boolean  @default(true)
  gameAllowed   Boolean  @default(false)
  timestamp     DateTime @default(now())
  ticketsLimit  Int      @default(3)
  changedById   String
  user          User     @relation(fields: [changedById], references: [id])
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String?  @db.LongText
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model Container {
  id                 String               @id @default(cuid())
  name               String
  content            String?              @db.LongText
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Item               Item[]
  GeoPointContainers GeoPointContainers[]
}

model Item {
  id            Int        @id @default(autoincrement())
  name          String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  content       String?    @db.LongText
  auspexData    String?    @db.LongText
  hackerData    String?    @db.LongText
  animalismData String?    @db.LongText
  image         String?
  address       String?
  usage         Int        @default(-1)
  typeId        Int        @default(1)
  coordX        Float?
  coordY        Float?
  isTrash       Boolean    @default(false)
  isTradable    Boolean    @default(true)
  type          ItemType   @relation(fields: [typeId], references: [id])
  createdBy     User       @relation(fields: [createdById], references: [id])
  createdById   String
  ownedById     Int?
  lastOwnedById Int?
  lastUsedById  Int?
  ownedBy       Char?      @relation(fields: [ownedById], references: [id])
  containerId   String?
  container     Container? @relation(fields: [containerId], references: [id])
}

model ItemType {
  id              Int               @id @default(autoincrement())
  name            String
  image           String?
  cost            Int
  costIncrease    Int               @default(0)
  usage           Int               @default(-1)
  isPurchasable   Boolean           @default(false)
  isTrash         Boolean           @default(false)
  isTradable      Boolean           @default(true)
  content         String            @db.LongText
  auspexData      String?           @db.LongText
  hackerData      String?           @db.LongText
  animalismData   String?           @db.LongText
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Item            Item[]
  bloodAmount     Int               @default(0)
  bloodPool       Int               @default(0)
  violation       String?
  status          String?
  boon            String?
  companyLevels   Int               @default(0)
  AddingAbility   AddingAbility[]
  RemovingAbility RemovingAbility[]
  UsingAbility    UsingAbility[]
  ItemEffects     ItemEffects[]
}

model AddingAbility {
  id         Int      @id @default(autoincrement())
  itemTypeId Int
  abilityId  Int
  ability    Ability  @relation(fields: [abilityId], references: [id])
  ItemType   ItemType @relation(fields: [itemTypeId], references: [id], onDelete: Cascade)
}

model RemovingAbility {
  id         Int      @id @default(autoincrement())
  itemTypeId Int
  abilityId  Int
  ability    Ability  @relation(fields: [abilityId], references: [id])
  ItemType   ItemType @relation(fields: [itemTypeId], references: [id], onDelete: Cascade)
}

model UsingAbility {
  id         Int      @id @default(autoincrement())
  itemTypeId Int
  abilityId  Int
  ability    Ability  @relation(fields: [abilityId], references: [id])
  ItemType   ItemType @relation(fields: [itemTypeId], references: [id], onDelete: Cascade)
}

model Company {
  id          String        @id @default(cuid())
  name        String
  image       String
  level       Int           @default(1)
  isActive    Boolean       @default(true)
  isVisible   Boolean       @default(true)
  isWarrens   Boolean       @default(false)
  coordX      Float         @default(0)
  coordY      Float         @default(0)
  content     String        @db.LongText
  characterId Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  character   Char          @relation(fields: [characterId], references: [id], onDelete: Cascade)
  BankAccount BankAccount[]
}

model BankAccount {
  id          Int      @id @default(autoincrement())
  address     String
  balance     Int
  characterId Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  character   Char     @relation(fields: [characterId], references: [id], onDelete: Cascade)
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model GeoPoint {
  id                 String               @id @default(cuid())
  lat                Float
  lng                Float
  name               String
  isVisible          Boolean              @default(false)
  icon               String?
  content            String?              @db.LongText
  auspexData         String?              @db.LongText
  animalismData      String?              @db.LongText
  hackerData         String?              @db.LongText
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  GeoPointEffects    GeoPointEffects[]
  GeoPointContainers GeoPointContainers[]
}

model GeoPointEffects {
  id         Int       @id @default(autoincrement())
  effectId   Int
  geoPointId String
  geoPoint   GeoPoint? @relation(fields: [geoPointId], references: [id])
  effect     Effect?   @relation(fields: [effectId], references: [id])
}

model GeoPointContainers {
  id          Int        @id @default(autoincrement())
  containerId String
  container   Container? @relation(fields: [containerId], references: [id])
  geoPointId  String
  geoPoint    GeoPoint?  @relation(fields: [geoPointId], references: [id])
}

model HuntingGround {
  id        Int               @id @default(autoincrement())
  name      String
  radius    Int
  max_inst  Int
  min_inst  Int               @default(0)
  delay     Int               @default(3600)
  coordY    Float
  coordX    Float
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  content   String?           @db.LongText
  instances HuntingInstance[]

  @@index([name])
}

model HuntingDomain {
  id         Int       @id @default(autoincrement())
  name       String
  radius     Int
  validUntil DateTime?
  coordY     Float
  coordX     Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  content    String?   @db.LongText
}

model HuntingSecurity {
  id         Int       @id @default(autoincrement())
  name       String
  radius     Int
  validUntil DateTime?
  coordY     Float
  coordX     Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  content    String?   @db.LongText
}

model HuntingData {
  id        Int                  @id @default(autoincrement())
  name      String
  image     String?
  hunt_req  String?
  descs     HuntingDescription[]
  instances HuntingInstance[]

  @@index([name])
}

model HuntingInstance {
  id        Int            @id @default(autoincrement())
  remains   Int            @default(1)
  coordY    Float
  coordX    Float
  temporary Boolean        @default(false)
  expires   DateTime?
  isVisible Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  targetId  Int
  target    HuntingData    @relation(fields: [targetId], references: [id], onDelete: Cascade)
  groundId  Int?
  ground    HuntingGround? @relation(fields: [groundId], references: [id], onDelete: SetNull)
  hunts     Hunt[]
}

model HuntingDescription {
  id       Int         @id @default(autoincrement())
  targetId Int
  remains  Int         @default(1)
  content  String?     @db.LongText
  target   HuntingData @relation(fields: [targetId], references: [id], onDelete: Cascade)
}

model Hunt {
  id          Int              @id @default(autoincrement())
  instanceId  Int?
  characterId Int
  createdById String
  status      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  character   Char             @relation(fields: [characterId], references: [id])
  createdBy   User             @relation(fields: [createdById], references: [id])
  instance    HuntingInstance? @relation(fields: [instanceId], references: [id], onDelete: SetNull)
}

model Ticket {
  id          Int       @id @default(autoincrement())
  name        String
  isResolved  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  characterId Int
  character   Char      @relation(fields: [characterId], references: [id], onDelete: Cascade)
  Message     Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String?  @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isAdmin   Boolean  @default(false)
  ticketId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model Char {
  id                  Int                   @id @default(autoincrement())
  name                String
  factionId           Int
  clanId              Int
  visible             Boolean               @default(false)
  additionalAbilities Int                   @default(0)
  bloodAmount         Int                   @default(10)
  bloodPool           Int                   @default(10)
  health              Int                   @default(10)
  isFixed             Boolean               @default(false)
  playerId            String
  playerName          String?
  playerContact       String?
  image               String?
  age                 String?
  sire                String?
  title               String?
  status              String?
  childer             String?
  hunt_req            String?
  comment             String?               @db.LongText
  p_comment           String?               @db.LongText
  alive               Boolean               @default(true)
  pending             Boolean?              @default(false)
  verified            Boolean?              @default(false)
  ambition            String?               @db.LongText
  publicInfo          String?               @db.LongText
  content             String?               @db.LongText
  timeout             Boolean               @default(false)
  timeoutReason       String?
  timeoutAt           DateTime?
  timeoutDuration     Int?
  animalismData       String?               @db.LongText
  hackerData          String?               @db.LongText
  auspexData          String?               @db.LongText
  banned              Boolean               @default(false)
  bannedReason        String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  createdBy           User                  @relation(fields: [playerId], references: [id])
  clan                Clan                  @relation(fields: [clanId], references: [id])
  faction             Faction               @relation(fields: [factionId], references: [id])
  abilities           CharacterAbilities[]
  features            CharacterFeatures[]
  rituals             CharacterRituals[]
  knowledges          CharacterKnowledges[]
  effects             CharacterEffects[]
  hunts               Hunt[]
  createdById         String
  active              Boolean               @default(false)
  bankAccount         BankAccount[]
  Company             Company[]
  Item                Item[]
  Ticket              Ticket[]
}

model CharacterEffects {
  id          Int       @id @default(autoincrement())
  characterId Int
  effectId    Int
  expires     DateTime?
  effect      Effect    @relation(fields: [effectId], references: [id])
  Char        Char      @relation(fields: [characterId], references: [id], onDelete: Cascade)
}

model ItemEffects {
  id       Int       @id @default(autoincrement())
  typeId   Int
  effectId Int
  expires  DateTime?
  duration Int?
  effect   Effect    @relation(fields: [effectId], references: [id])
  ItemType ItemType  @relation(fields: [typeId], references: [id], onDelete: Cascade)
}

model RitualEffects {
  id       Int       @id @default(autoincrement())
  ritualId Int
  effectId Int
  expires  DateTime?
  duration Int?
  effect   Effect    @relation(fields: [effectId], references: [id])
  Ritual   Ritual    @relation(fields: [ritualId], references: [id], onDelete: Cascade)
}

model AbilityEffects {
  id        Int       @id @default(autoincrement())
  abilityId Int
  effectId  Int
  expires   DateTime?
  duration  Int?
  effect    Effect    @relation(fields: [effectId], references: [id])
  Ability   Ability   @relation(fields: [abilityId], references: [id], onDelete: Cascade)
}

model FeatureEffects {
  id        Int       @id @default(autoincrement())
  featureId Int
  effectId  Int
  expires   DateTime?
  duration  Int?
  effect    Effect    @relation(fields: [effectId], references: [id])
  Feature   Feature   @relation(fields: [featureId], references: [id], onDelete: Cascade)
}

model Effect {
  id               Int                @id @default(autoincrement())
  name             String
  expiration       Int                @default(1)
  content          String?            @db.LongText
  auspexData       String?            @db.LongText
  visibleToPlayer  Boolean            @default(false)
  color            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  CharacterEffects CharacterEffects[]
  ItemEffects      ItemEffects[]
  RitualEffects    RitualEffects[]
  AbilityEffects   AbilityEffects[]
  FeatureEffects   FeatureEffects[]
  GeoPointEffects  GeoPointEffects[]
}

model ClanInFaction {
  id        Int     @id @default(autoincrement())
  factionId Int
  clanId    Int
  clan      Clan    @relation(fields: [clanId], references: [id], onDelete: Cascade)
  faction   Faction @relation(fields: [factionId], references: [id], onDelete: Cascade)
}

model AbilityAvailable {
  id        Int     @id @default(autoincrement())
  abilityId Int
  clanId    Int
  clan      Clan    @relation(fields: [clanId], references: [id], onDelete: Cascade)
  ability   Ability @relation(fields: [abilityId], references: [id], onDelete: Cascade)
}

model FeatureAvailable {
  id        Int     @id @default(autoincrement())
  featureId Int
  clanId    Int
  clan      Clan    @relation(fields: [clanId], references: [id], onDelete: Cascade)
  feature   Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)
}

model Clan {
  id               Int                @id @default(autoincrement())
  name             String
  content          String             @db.LongText
  visibleToPlayer  Boolean            @default(false)
  icon             String?
  Char             Char[]
  ClanInFaction    ClanInFaction[]
  AbilityAvailable AbilityAvailable[]
  FeatureAvailable FeatureAvailable[]
}

model Faction {
  id              Int             @id @default(autoincrement())
  name            String
  icon            String?
  content         String          @db.LongText
  visibleToPlayer Boolean         @default(false)
  Char            Char[]
  ClanInFaction   ClanInFaction[]
}

model CharacterKnowledges {
  id          Int       @id @default(autoincrement())
  characterId Int
  knowledgeId Int
  knowledge   Knowledge @relation(fields: [knowledgeId], references: [id])
  Char        Char      @relation(fields: [characterId], references: [id], onDelete: Cascade)
}

model Knowledge {
  id                  Int                   @id @default(autoincrement())
  name                String
  content             String                @db.LongText
  visibleToPlayer     Boolean               @default(false)
  CharacterKnowledges CharacterKnowledges[]
  RitualKnowledges    RitualKnowledges[]
}

model CharacterRituals {
  id          Int    @id @default(autoincrement())
  characterId Int
  ritualId    Int
  ritual      Ritual @relation(fields: [ritualId], references: [id])
  Char        Char   @relation(fields: [characterId], references: [id], onDelete: Cascade)
}

model Ritual {
  id               Int                @id @default(autoincrement())
  name             String
  image            String
  recipe           String             @db.LongText
  content          String             @db.LongText
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  visibleToPlayer  Boolean            @default(false)
  CharacterRituals CharacterRituals[]
  ritualKnowledges RitualKnowledges[]
  RitualEffects    RitualEffects[]
}

model RitualKnowledges {
  id          Int       @id @default(autoincrement())
  ritualId    Int
  knowledgeId Int
  ritual      Ritual    @relation(fields: [ritualId], references: [id], onDelete: Cascade)
  knowledge   Knowledge @relation(fields: [knowledgeId], references: [id], onDelete: Cascade)
}

model CharacterAbilities {
  id          Int     @id @default(autoincrement())
  characterId Int
  abilityId   Int
  abilitiy    Ability @relation(fields: [abilityId], references: [id])
  Char        Char    @relation(fields: [characterId], references: [id], onDelete: Cascade)
}

model Ability {
  id                 Int                  @id @default(autoincrement())
  name               String
  cost               Int                  @default(1)
  icon               String?
  content            String               @db.LongText
  expertise          Boolean
  requirementId      Int?
  visibleToPlayer    Boolean              @default(false)
  CharacterAbilities CharacterAbilities[]
  AbilityAvailable   AbilityAvailable[]
  AddingAbility      AddingAbility[]
  RemovingAbility    RemovingAbility[]
  UsingAbility       UsingAbility[]
  AbilityEffects     AbilityEffects[]
}

model CharacterFeatures {
  id              Int     @id @default(autoincrement())
  characterId     Int
  featureId       Int
  description     String? @db.LongText
  visibleToPlayer Boolean @default(false)
  feature         Feature @relation(fields: [featureId], references: [id])
  Char            Char    @relation(fields: [characterId], references: [id], onDelete: Cascade)
}

model Feature {
  id                Int                 @id @default(autoincrement())
  name              String
  content           String              @db.LongText
  cost              Int
  visibleToPlayer   Boolean             @default(false)
  CharacterFeatures CharacterFeatures[]
  FeatureAvailable  FeatureAvailable[]

  FeatureEffects FeatureEffects[]
}

model Rule {
  id          Int      @id @default(autoincrement())
  name        String
  link        String
  categoryId  Int
  orderedAs   Int
  content     String   @db.LongText
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
}

model Product {
  id             Int            @id @default(autoincrement())
  title          String
  subtitle       String?
  description    String?        @db.LongText
  size           String?
  color          String?
  colorsAvailabe String?
  stock          Int            @default(0)
  price          Float
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  images         ProductImage[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  source    String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  isAdmin       Boolean   @default(false)
  isPersonnel   Boolean   @default(false)
  emailVerified DateTime?
  image         String?
  background    String?
  phone         String?
  vk            String?
  tg            String?
  discord       String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  rules         Rule[]
  characters    Char[]
  hunts         Hunt[]
  Item          Item[]
  AppData       AppData[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
