// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String?  @db.LongText
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model HuntingGround {
  id        Int               @id @default(autoincrement())
  name      String
  radius    Int
  max_inst  Int
  min_inst  Int               @default(0)
  delay     Int               @default(3600)
  coordY    Float
  coordX    Float
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  content   String?           @db.LongText
  instances HuntingInstance[]

  @@index([name])
}

model HuntingData {
  id        Int                  @id @default(autoincrement())
  name      String
  image     String?
  hunt_req  String?
  descs     HuntingDescription[]
  instances HuntingInstance[]

  @@index([name])
}

model HuntingInstance {
  id        Int            @id @default(autoincrement())
  remains   Int            @default(1)
  coordY    Float
  coordX    Float
  temporary Boolean        @default(false)
  expires   DateTime?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  targetId  Int
  target    HuntingData    @relation(fields: [targetId], references: [id], onDelete: Cascade)
  groundId  Int?
  ground    HuntingGround? @relation(fields: [groundId], references: [id], onDelete: SetNull)
  hunts     Hunt[]
}

model HuntingDescription {
  id       Int         @id @default(autoincrement())
  targetId Int
  remains  Int         @default(1)
  content  String?     @db.LongText
  target   HuntingData @relation(fields: [targetId], references: [id], onDelete: Cascade)
}

model Hunt {
  id          Int              @id @default(autoincrement())
  instanceId  Int?
  characterId Int
  createdById String
  status      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  character   Char             @relation(fields: [characterId], references: [id])
  createdBy   User             @relation(fields: [createdById], references: [id])
  instance    HuntingInstance? @relation(fields: [instanceId], references: [id], onDelete: SetNull)
}

model Char {
  id                  Int                  @id @default(autoincrement())
  name                String
  factionId           Int
  clanId              Int
  visible             Boolean              @default(false)
  additionalAbilities Int                  @default(0)
  playerId            String?
  playerName          String?
  playerContact       String?
  image               String?
  age                 String?
  sire                String?
  title               String?
  status              String?
  childer             String?
  hunt_req            String?
  comment             String?              @db.LongText
  p_comment           String?              @db.LongText
  pending             Boolean?             @default(false)
  verified            Boolean?             @default(false)
  ambition            String?              @db.LongText
  publicInfo          String?              @db.LongText
  content             String?              @db.LongText
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  createdBy           User                 @relation(fields: [createdById], references: [id])
  clan                Clan                 @relation(fields: [clanId], references: [id])
  faction             Faction              @relation(fields: [factionId], references: [id])
  abilities           CharacterAbilities[]
  features            CharacterFeatures[]
  hunts               Hunt[]
  createdById         String
}

model ClanInFaction {
  id        Int     @id @default(autoincrement())
  factionId Int
  clanId    Int
  clan      Clan    @relation(fields: [clanId], references: [id], onDelete: Cascade)
  faction   Faction @relation(fields: [factionId], references: [id], onDelete: Cascade)
}

model AbilityAvailable {
  id        Int     @id @default(autoincrement())
  abilityId Int
  clanId    Int
  clan      Clan    @relation(fields: [clanId], references: [id], onDelete: Cascade)
  ability   Ability @relation(fields: [abilityId], references: [id], onDelete: Cascade)
}

model FeatureAvailable {
  id        Int     @id @default(autoincrement())
  featureId Int
  clanId    Int
  clan      Clan    @relation(fields: [clanId], references: [id], onDelete: Cascade)
  feature   Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)
}

model Clan {
  id               Int                @id @default(autoincrement())
  name             String
  content          String             @db.LongText
  visibleToPlayer  Boolean            @default(false)
  icon             String?
  Char             Char[]
  ClanInFaction    ClanInFaction[]
  AbilityAvailable AbilityAvailable[]
  FeatureAvailable FeatureAvailable[]
}

model Faction {
  id              Int             @id @default(autoincrement())
  name            String
  icon            String?
  content         String          @db.LongText
  visibleToPlayer Boolean         @default(false)
  Char            Char[]
  ClanInFaction   ClanInFaction[]
}

model CharacterAbilities {
  id          Int     @id @default(autoincrement())
  characterId Int
  abilityId   Int
  abilitiy    Ability @relation(fields: [abilityId], references: [id])
  Char        Char    @relation(fields: [characterId], references: [id], onDelete: Cascade)
}

model Ability {
  id                 Int                  @id @default(autoincrement())
  name               String
  icon               String?
  content            String               @db.LongText
  expertise          Boolean
  requirementId      Int?
  visibleToPlayer    Boolean              @default(false)
  CharacterAbilities CharacterAbilities[]
  AbilityAvailable   AbilityAvailable[]
}

model CharacterFeatures {
  id              Int     @id @default(autoincrement())
  characterId     Int
  featureId       Int
  description     String?
  visibleToPlayer Boolean @default(false)
  feature         Feature @relation(fields: [featureId], references: [id])
  Char            Char    @relation(fields: [characterId], references: [id], onDelete: Cascade)
}

model Feature {
  id                Int                 @id @default(autoincrement())
  name              String
  content           String              @db.LongText
  cost              Int
  visibleToPlayer   Boolean             @default(false)
  CharacterFeatures CharacterFeatures[]
  FeatureAvailable  FeatureAvailable[]
}

model Rule {
  id          Int      @id @default(autoincrement())
  name        String
  link        String
  categoryId  Int
  orderedAs   Int
  content     String   @db.LongText
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
}

model Product {
  id             Int            @id @default(autoincrement())
  title          String
  subtitle       String?
  description    String?        @db.LongText
  size           String?
  color          String?
  colorsAvailabe String?
  stock          Int            @default(0)
  price          Float
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  images         ProductImage[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  source    String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  isAdmin       Boolean   @default(false)
  isPersonnel   Boolean   @default(false)
  emailVerified DateTime?
  image         String?
  background    String?
  phone         String?
  vk            String?
  tg            String?
  discord       String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  rules         Rule[]
  characters    Char[]
  hunts         Hunt[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
